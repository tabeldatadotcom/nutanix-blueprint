{"status":{},"contains_secrets":true,"product_version":"3.5.2","spec":{"description":"Create Karbon Kubernetes Cluster using Karbon API.  The user can choose the following network interface: Flannel or Calico.  The user can also choose the type of Master Node: Single, Active-Passive, Active-Active with Load Balancer","resources":{"client_attrs":{"724f4e3d-5f20-8d10-f2a5-c93f223a29e3":{"y":-765.3367061127,"x":164.8006824674},"0324d98b-37e5-f410-918e-5dd821d515fa":{"y":-731.6312507719,"x":350.5856791952},"25fcec15-64fd-2374-ac43-00c266495cc3":{"y":-731.6312507719,"x":350.5856791952},"ec3c7adf_deployment":{"y":-823.1541538806,"x":280.8190943803},"a2af5579_deployment":{"y":-799.3203837976,"x":55.5578782542},"75513331_deployment":{"y":-823.1541538806,"x":280.8190943803},"02c86008_deployment":{"y":-799.3203837976,"x":55.5578782542},"39c272bf-cfef-d092-ed4b-4119ce438370":{"y":-807.3625980917,"x":288.9908500418},"ad89a3ef_deployment":{"y":-799.3203837976,"x":55.5578782542},"1aafcd11-103c-4365-13dc-426fb496418b":{"y":-731.6312507719,"x":350.5856791952},"b45aa011_deployment":{"y":-823.1541538806,"x":280.8190943803}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Download Kube Config"}],"name":"0718a6f4_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Download Kube Config","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b8611983_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"2d048365_runbook","main_task_local_reference":{"kind":"app_task","name":"0718a6f4_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"207b7498_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14175962_runbook","main_task_local_reference":{"kind":"app_task","name":"207b7498_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"38f29b38_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7aa59085_runbook","main_task_local_reference":{"kind":"app_task","name":"38f29b38_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"5945d19c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14c892f3_runbook","main_task_local_reference":{"kind":"app_task","name":"5945d19c_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"2c2933cb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14058f6e_runbook","main_task_local_reference":{"kind":"app_task","name":"2c2933cb_dag"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Get Kubeconfig"},{"kind":"app_task","name":"Output Kubeconfig file"}],"name":"65401c9b_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Get Kubeconfig"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Output Kubeconfig file"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Kubeconfig","attrs":{"exit_status":[],"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n# Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/kubeconfig\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/kubeconfig\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\nkubeconfig = resp.json()\n \n \nkubearray = kubeconfig['kube_config'].splitlines()\nprint \"src_server={}\".format(kubearray[8].rstrip('server:'))\nprint \"src_ca={}\".format(kubearray[9].rstrip('certificate-authority-data:'))\nprint \"src_token={}\".format(kubearray[13].rstrip('token:'))\n#print \"src_kubeconfig={}\".format(kubeconfig['kube_config'])","eval_variables":["src_server","src_ca","src_token"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Output Kubeconfig file","attrs":{"exit_status":[],"script":"rm \/home\/centos\/@@{cluster_name}@@-kubectl.cfg\n\necho \"\n# -*- mode: yaml; -*-\n# vim: syntax=yaml\n#\napiVersion: v1\nkind: Config\nclusters:\n- name: @@{cluster_name}@@\n  cluster:\n    @@{src_server}@@\n    @@{src_ca}@@ \nusers:\n- name: default-user-@@{cluster_name}@@\n  user:\n    @@{src_token}@@\ncontexts:\n- context:\n    cluster: @@{cluster_name}@@\n    user: default-user-@@{cluster_name}@@\n  name: @@{cluster_name}@@-context\ncurrent-context: @@{cluster_name}@@-context\" > \/home\/centos\/@@{cluster_name}@@-kubectl.cfg\n\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"b8611983_runbook","main_task_local_reference":{"kind":"app_task","name":"65401c9b_dag"},"variable_list":[]},"name":"Download Kube Config"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Add Worker Node"},{"kind":"app_task","name":"Wait for 2 mins"},{"kind":"app_task","name":"Check Task Status"}],"name":"b17ec9ac_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Add Worker Node"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for 2 mins"}},{"from_task_reference":{"kind":"app_task","name":"Wait for 2 mins"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check Task Status"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Add Worker Node","attrs":{"exit_status":[],"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{add_worker_node_count}@@\n}\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool_name}@@\/add-nodes\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool_name}@@\/add-nodes\"\n\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Creation of task to add Worker Node was successful\", json.dumps(json.loads(resp.content), indent=4)\n  add_task_uuid = resp.json()['task_uuid']\n  print \"task_uuid={}\".format(add_task_uuid)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Creation of task to add Worker Node failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","eval_variables":["task_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Wait for 2 mins","attrs":{"type":"","interval_secs":120},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check Task Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  task_status = resp.json()\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    \n    if task_status['percentage_complete'] == 100:\n      print \"Addition of worker node was successful\", json.dumps(json.loads(resp.content), indent=4)\n      exit(0)\n    else:\n      print \"Addition of Worker Node not ready. {0} percentage complete. Sleeping for 60 seconds\".format(task_status['percentage_complete'])\n      count = count + 1\n      sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Addition of Worker Node failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 10 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"1f1ffd77_runbook","main_task_local_reference":{"kind":"app_task","name":"b17ec9ac_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"task_uuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"add_worker_node_count","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Add Worker Node in NodePool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Worker Node"},{"kind":"app_task","name":"Delay for 5 seconds"},{"kind":"app_task","name":"Check for Task Status"}],"name":"4cdeab56_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Delete Worker Node"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delay for 5 seconds"}},{"from_task_reference":{"kind":"app_task","name":"Delay for 5 seconds"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check for Task Status"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Worker Node","attrs":{"exit_status":[],"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{remove_worker_node_count}@@\n}\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool_name}@@\/remove-nodes\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool_name}@@\/remove-nodes\"\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Creation of task to remove Worker Node was successful\", json.dumps(json.loads(resp.content), indent=4)\n  add_task_uuid = resp.json()['task_uuid']\n  print \"task_uuid={}\".format(add_task_uuid)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Creation of task to remove Worker Node failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","eval_variables":["task_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delay for 5 seconds","attrs":{"type":"","interval_secs":5},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check for Task Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  task_status = resp.json()\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    \n    if task_status['percentage_complete'] == 100:\n      print \"Removal of worker node was successful\", json.dumps(json.loads(resp.content), indent=4)\n      exit(0)\n    else:\n      print \"Removal of Worker Node not ready. {0} percentage complete. Sleeping for 60 seconds\".format(task_status['percentage_complete'])\n      count = count + 1\n      sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Removal of Worker Node failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 10 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"c4689df3_runbook","main_task_local_reference":{"kind":"app_task","name":"4cdeab56_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"task_uuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"remove_worker_node_count","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Delete Worker Node in Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create new Node Pool"},{"kind":"app_task","name":"Wait for 2 mins"},{"kind":"app_task","name":"Check Task Status"}],"name":"90524390_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Create new Node Pool"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for 2 mins"}},{"from_task_reference":{"kind":"app_task","name":"Wait for 2 mins"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check Task Status"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create new Node Pool","attrs":{"exit_status":[],"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"ahv_config\": {\n    \"cpu\": @@{node_cpu}@@, #required\n    \"disk_mib\": @@{node_disk_mib}@@, #required\n  #  \"iscsi_network_name\": \"string\",\n  #  \"iscsi_network_uuid\": \"string\",\n    \"memory_mib\": @@{node_memory_mib}@@, #required\n  #  \"network_name\": \"string\",\n  #  \"network_uuid\": \"string\",\n  #  \"prism_element_cluster_uuid\": \"string\"\n  },\n # \"gpu_config_list\": [\n #   {\n #     \"count\": 1,\n #     \"name\": \"@@{gpu_model}@@\" #required\n #   }\n # ],\n # \"labels\": {\n #   \"property1\": \"string\",\n #   \"property2\": \"string\"\n # },\n  \"name\": \"@@{node_pool_name}@@\", #required\n  \"node_os_version\": \"@@{image_name}@@\",\n  \"num_instances\": @@{num_nodes}@@\n}\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n  \n#url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/add-node-pool\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/add-node-pool\"\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Creation of task to create Worker Node Pool was successful\", json.dumps(json.loads(resp.content), indent=4)\n  add_task_uuid = resp.json()['task_uuid']\n  print \"task_uuid={}\".format(add_task_uuid)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Creation of task to create Worker Node Pool failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","eval_variables":["task_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Wait for 2 mins","attrs":{"type":"","interval_secs":120},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check Task Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  task_status = resp.json()\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    \n    if task_status['percentage_complete'] == 100:\n      print \"Addition of worker node was successful\", json.dumps(json.loads(resp.content), indent=4)\n      exit(0)\n    else:\n      print \"Addition of Worker Node not ready. {0} percentage complete. Sleeping for 60 seconds\".format(task_status['percentage_complete'])\n      count = count + 1\n      sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Addition of Worker Node failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 10 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"f5aeeff9_runbook","main_task_local_reference":{"kind":"app_task","name":"90524390_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_cpu","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_disk_mib","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_memory_mib","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"gpu_model","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"num_nodes","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Create Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Node Pool"},{"kind":"app_task","name":"Wait for 10 seconds"},{"kind":"app_task","name":"Check for Task Status"}],"name":"b0dd692c_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Delete Node Pool"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for 10 seconds"}},{"from_task_reference":{"kind":"app_task","name":"Wait for 10 seconds"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check for Task Status"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Node Pool","attrs":{"exit_status":[],"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \n}\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool}@@\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\/@@{node_pool}@@\"\nresp = urlreq(url, verb='DELETE',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Creation of task to remove Node Pool was successful\", json.dumps(json.loads(resp.content), indent=4)\n  add_task_uuid = resp.json()['task_uuid']\n  print \"task_uuid={}\".format(add_task_uuid)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Creation of task to remove Node Pool failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","eval_variables":["task_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Wait for 10 seconds","attrs":{"type":"","interval_secs":10},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check for Task Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/tasks\/@@{task_uuid}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  task_status = resp.json()\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    \n    if task_status['percentage_complete'] == 100:\n      print \"Removal of worker node pool was successful\", json.dumps(json.loads(resp.content), indent=4)\n      exit(0)\n    else:\n      print \"Removal of Worker Node Pool not ready. {0} percentage complete. Sleeping for 60 seconds\".format(task_status['percentage_complete'])\n      count = count + 1\n      sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Removal of Worker Node Pool failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 10 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5d110e2f_runbook","main_task_local_reference":{"kind":"app_task","name":"b0dd692c_dag"},"variable_list":[]},"name":"Delete Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetSSHKey"},{"kind":"app_task","name":"Output ssh key"}],"name":"8355a8de_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetSSHKey"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Output ssh key"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetSSHKey","attrs":{"exit_status":[],"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n# Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/kubeconfig\"\n\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/ssh\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\nif resp.ok:\n  sshconfig = resp.json()\n  print \"certificate={}\".format(sshconfig['certificate'])\n  privateKeyPEM = sshconfig['private_key'].encode('utf8')\n  print \"private_key={}\".format(privateKeyPEM)\n  print \"karbon_ssh={}\".format(privateKeyPEM)\n  print \"username={}\".format(sshconfig['username'])  \nelse:\n  exit(1)\n  \n\n","eval_variables":["certificate","username","karbon_ssh"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Output ssh key","attrs":{"exit_status":[],"script":"echo \"@@{CENTOS.secret}@@\" | tee ~\/.ssh\/id_rsa\nchmod 600 ~\/.ssh\/id_rsa\necho \"@@{centos_pub_key}@@\" | tee ~\/.ssh\/id_rsa.pub\nchmod 600 ~\/.ssh\/authorized_keys\n\nrm ~\/.ssh\/karbon_id_rsa.pub\necho \"@@{certificate}@@\" | tee ~\/.ssh\/karbon_id_rsa.pub\nrm ~\/.ssh\/karbon_id_rsa\n#echo \"@@{private_key}@@\" | tee \/home\/centos\/.ssh\/karbon_id_rsa\necho \"@@{karbon_ssh}@@\" | tee \/home\/centos\/.ssh\/karbon_id_rsa\necho \"@@{private_key}@@\"","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"e3bea0da_runbook","main_task_local_reference":{"kind":"app_task","name":"8355a8de_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"karbon_ssh","value":"-","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"GetSSHKey"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetClusterUUID"},{"kind":"app_task","name":"Get Image UUID"},{"kind":"app_task","name":"Upgrade Nodes"},{"kind":"app_task","name":"Waiting 5mn"},{"kind":"app_task","name":"Check health"}],"name":"c64a1da7_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetClusterUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get Image UUID"}},{"from_task_reference":{"kind":"app_task","name":"Get Image UUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Upgrade Nodes"}},{"from_task_reference":{"kind":"app_task","name":"Upgrade Nodes"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Waiting 5mn"}},{"from_task_reference":{"kind":"app_task","name":"Waiting 5mn"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check health"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetClusterUUID","attrs":{"exit_status":[],"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1\/k8s\/clusters\/\"+k8s_cluster\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, verify=False, headers=headers)\n\ncluster_json = r.json()\n\ntmp=cluster_json['uuid']\n\nprint(\"Cluster_UUID=\"+tmp)\n\n","eval_variables":["Cluster_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Image UUID","attrs":{"exit_status":[],"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"filter\":\"name==karbon-@@{Target_OS}@@\"\n}\nurl = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/images\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\ncluster_json = r.json()\n\ntmp=cluster_json['entities'][0]['metadata']['uuid']\n\nprint(\"Image_UUID=\"+tmp)\n","eval_variables":["Image_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Upgrade Nodes","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n\"image_uuid\":\"@@{Image_UUID}@@\",\n\"cluster_uuid\":\"@@{Cluster_UUID}@@\"\n}\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/acs\/k8s\/cluster\/@@{Cluster_UUID}@@\/upgrade\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nprint(str(r))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Waiting 5mn","attrs":{"type":"","interval_secs":300},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check health","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n  \n  result=json.loads(resp.content)\n\n  # If the call went through successfully, find the image by name\n  if result['status'] == \"kActive\" :\n    print \"Cluster update was successful\"\n    exit(0)\n  \n  elif (result['status'] == \"kUpdating\" ):\n    print \"Cluster Health: K8s cluster update not ready (\"+result['status']+\").  Sleeping for 60 seconds\"\n    count = count + 1\n    sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Cluster update failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 20 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"b1048112_runbook","main_task_local_reference":{"kind":"app_task","name":"c64a1da7_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Target_OS","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Update Node OS"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Get Cluster UUID"},{"kind":"app_task","name":"Upgrade k8s"},{"kind":"app_task","name":"Waiting 10mn"},{"kind":"app_task","name":"Check heath"}],"name":"b836efe3_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Get Cluster UUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Upgrade k8s"}},{"from_task_reference":{"kind":"app_task","name":"Upgrade k8s"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Waiting 10mn"}},{"from_task_reference":{"kind":"app_task","name":"Waiting 10mn"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check heath"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Cluster UUID","attrs":{"exit_status":[],"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1\/k8s\/clusters\/\"+k8s_cluster\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, verify=False, headers=headers)\n\ncluster_json = r.json()\n\ntmp=cluster_json['uuid']\n\nprint(\"Cluster_UUID=\"+tmp)\n\n","eval_variables":["Cluster_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Upgrade k8s","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"upgrade_config\": {\n    \"pkg_version\":\"@@{Kube_Target}@@\" \n  },\n  \"cluster_uuid\":\"@@{Cluster_UUID}@@\",\n  \"drain-policy\":\"kAlways\",\n  \"drain-timeout\":\"@@{DRAINTIMEOUT}@@\"\n}\n\n  \nurl = \"https:\/\/\" + ip + \":9440\/karbon\/acs\/k8s\/cluster\/@@{Cluster_UUID}@@\/k8s_upgrade\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nprint(str(r))","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Waiting 10mn","attrs":{"type":"","interval_secs":600},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check heath","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n  \n  result=json.loads(resp.content)\n\n  # If the call went through successfully, find the image by name\n  if result['status'] == \"kActive\" :\n    print \"Cluster update was successful\"\n    exit(0)\n  \n  elif (result['status'] == \"kUpdating\" ):\n    print \"Cluster Health: K8s cluster update not ready (\"+result['status']+\").  Sleeping for 60 seconds\"\n    count = count + 1\n    sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Cluster update failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 20 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"6f43dd04_runbook","main_task_local_reference":{"kind":"app_task","name":"b836efe3_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DRAINTIMEOUT","value":"180","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Kube_Target","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Update k8s"}],"depends_on_list":[],"name":"Karbon","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SUBNET_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Cluster_UUID","value":"000607f6-671a-69d1-0000-000000027f11","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_kubeconfig","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_server","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_ca","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_token","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"ssh username","data_type":"BASE","type":"LOCAL","name":"username","value":"centos","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"ssh certificate private key","data_type":"BASE","type":"LOCAL","name":"private_key","value":"","label":"","attrs":{"type":"LOCAL"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"ssh certificate","data_type":"BASE","type":"LOCAL","name":"certificate","value":"","label":"","attrs":{"type":"LOCAL"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"centos_pub_key","value":"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAii7qFDhVadLx5lULAG\/ooCUTA\/ATSmXbArs+GdHxbUWd\/bNGZCXnaQ2L1mSVVGDxfTbSaTJ3En3tVlMtD2RjZPdhqWESCaoj2kXLYSiNDS9qz3SK6h822je\/f9O9CzCTrw2XGhnDVwmNraUvO5wmQObCDthTXc72PcBOd6oa4ENsnuY9HtiETg29TZXgCYPFXipLBHSZYkBmGgccAeY9dq5ywiywBJLuoSovXkkRJk3cd7GyhCRIwYzqfdgSmiAMYgJLrz\/UuLxatPqXts2D8v1xqR9EPNZNzgd4QHK4of1lqsNRuz2SxkwqLcXSw0mGcAL8mIwVpzhPzwmENC5Orw== rsa-key-20190108","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"task_uuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Master_VIP2","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"karbon_ssh","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"8d7f6a95_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5f2dba70_runbook","main_task_local_reference":{"kind":"app_task","name":"8d7f6a95_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"0bab6051_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f6ed02ac_runbook","main_task_local_reference":{"kind":"app_task","name":"0bab6051_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"30fdf6c5_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7ca47d08_runbook","main_task_local_reference":{"kind":"app_task","name":"30fdf6c5_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"4d73cde7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"d1512b3e_runbook","main_task_local_reference":{"kind":"app_task","name":"4d73cde7_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"e6c005fe_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"29c675a0_runbook","main_task_local_reference":{"kind":"app_task","name":"e6c005fe_dag"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"d78b3efa_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"489562df_runbook","main_task_local_reference":{"kind":"app_task","name":"d78b3efa_dag"},"variable_list":[]},"name":"Action1"}],"depends_on_list":[{"kind":"app_service","name":"Karbon"}],"name":"Centos_Terraform","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"centos_pub_key","value":"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAii7qFDhVadLx5lULAG\/ooCUTA\/ATSmXbArs+GdHxbUWd\/bNGZCXnaQ2L1mSVVGDxfTbSaTJ3En3tVlMtD2RjZPdhqWESCaoj2kXLYSiNDS9qz3SK6h822je\/f9O9CzCTrw2XGhnDVwmNraUvO5wmQObCDthTXc72PcBOd6oa4ENsnuY9HtiETg29TZXgCYPFXipLBHSZYkBmGgccAeY9dq5ywiywBJLuoSovXkkRJk3cd7GyhCRIwYzqfdgSmiAMYgJLrz\/UuLxatPqXts2D8v1xqR9EPNZNzgd4QHK4of1lqsNRuz2SxkwqLcXSw0mGcAL8mIwVpzhPzwmENC5Orw== rsa-key-20190108","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_ca","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_token","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_kubeconfig","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"src_server","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_AHV"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"0d288bf7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7565e0d8_runbook","main_task_local_reference":{"kind":"app_task","name":"0d288bf7_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_AHV"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"33f7fb9f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"18b4bb61_runbook","main_task_local_reference":{"kind":"app_task","name":"33f7fb9f_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Karbon_AHV","readiness_probe":{"connection_type":"SSH","retries":"10","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"120","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"rglab-karbon-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"6b9f5ee2-2eff-4608-b9d3-407a20d0d2e2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nfqdn: @@{name}@@\nmanage_etc_hosts: true\nhostname: @@{name}@@\ndisable_root: False\nssh_enabled: True\nssh_pwauth: True\nusers:\n  - name: centos\n#    passwd: @@{Centos 2 Credential.secret}@@\n    chpasswd: { expire: False }\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"ntnx-CentOS-7-x86_64-GenericCloud.qcow2","uuid":"66887375-fe3c-4b7a-8b1a-7df2cee9f562"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"Tabeldata","uuid":"000607f6-671a-69d1-0000-000000027f11"},"categories":{}},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_AHV_2"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"70bd2a46_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0b08de0d_runbook","main_task_local_reference":{"kind":"app_task","name":"70bd2a46_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Karbon_AHV_2"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"404dac77_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cc99784d_runbook","main_task_local_reference":{"kind":"app_task","name":"404dac77_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Karbon_AHV_2","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"e7db9324-911f-4b17-a4b9-bffcf60bf898"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nfqdn: @@{name}@@\nmanage_etc_hosts: true\nhostname: @@{name}@@\ndisable_root: False\nssh_enabled: True\nssh_pwauth: True\nusers:\n  - name: centos\n    passwd: @@{Centos 2 Credential.secret}@@\n    chpasswd: { expire: False }\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"AHV_78","uuid":"9bfdb19b-0064-404d-a66c-8e6a2901159b"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"DM3-POC082","uuid":"0005fed3-1b0b-6ad0-0000-00000002acdd"},"categories":{}},"variable_list":[]},{"description":"","action_list":[],"type":"AHV_VM","name":"Karbon_AHV_2_3","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"e7db9324-911f-4b17-a4b9-bffcf60bf898"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nfqdn: @@{name}@@\nmanage_etc_hosts: true\nhostname: @@{name}@@\ndisable_root: False\nssh_enabled: True\nssh_pwauth: True\nusers:\n  - name: centos\n    passwd: @@{Centos 2 Credential.secret}@@\n    chpasswd: { expire: False }\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"AHV_78","uuid":"9bfdb19b-0064-404d-a66c-8e6a2901159b"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"Tabeldata","uuid":"000607f6-671a-69d1-0000-000000027f11"},"categories":{}},"variable_list":[]},{"description":"","action_list":[],"type":"AHV_VM","name":"Centos_TF","readiness_probe":{"connection_type":"SSH","retries":"10","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"100","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"os_type":"Linux","create_spec":{"name":"rglab-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"6b9f5ee2-2eff-4608-b9d3-407a20d0d2e2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":4,"num_sockets":2,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nfqdn: @@{name}@@\nmanage_etc_hosts: true\nhostname: @@{name}@@\ndisable_root: False\nssh_enabled: True\nssh_pwauth: True\nusers:\n  - name: centos\n#    passwd: @@{Centos 2 Credential.secret}@@\n    chpasswd: { expire: False }\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"LEGACY","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"ntnx-CentOS-7-x86_64-GenericCloud.qcow2","uuid":"66887375-fe3c-4b7a-8b1a-7df2cee9f562"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":25600,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"Tabeldata","uuid":"000607f6-671a-69d1-0000-000000027f11"},"categories":{}},"variable_list":[]},{"description":"","action_list":[],"type":"AHV_VM","name":"VM5","readiness_probe":{"connection_type":"SSH","retries":"10","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"100","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"6b9f5ee2-2eff-4608-b9d3-407a20d0d2e2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":4,"num_sockets":2,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":null,"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"LEGACY","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"ntnx-CentOS-7-x86_64-GenericCloud.qcow2","uuid":"66887375-fe3c-4b7a-8b1a-7df2cee9f562"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":25600,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"Tabeldata","uuid":"000607f6-671a-69d1-0000-000000027f11"},"categories":{}},"variable_list":[]},{"description":"","action_list":[],"type":"AHV_VM","name":"VM6","readiness_probe":{"connection_type":"SSH","retries":"10","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"100","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","vpc_reference":null,"ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"6b9f5ee2-2eff-4608-b9d3-407a20d0d2e2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":4,"num_sockets":2,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nfqdn: @@{name}@@\nmanage_etc_hosts: true\nhostname: @@{name}@@\ndisable_root: False\nssh_enabled: True\nssh_pwauth: True\nusers:\n  - name: centos\n    passwd: @@{Centos 2 Credential.secret}@@\n    chpasswd: { expire: False }\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"f38d1d5f-ffe7-48ad-81c3-6a251e031d2b","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"LEGACY","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"ntnx-CentOS-7-x86_64-GenericCloud.qcow2","uuid":"66887375-fe3c-4b7a-8b1a-7df2cee9f562"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":25600,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":{"kind":"cluster","type":"","name":"Tabeldata","uuid":"000607f6-671a-69d1-0000-000000027f11"},"categories":{}},"variable_list":[]}],"credential_definition_list":[{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"7K4eFNcH3VNUE9C12nYtiCr2V\/VXt27Q3GYWgZRPVEnN4FoYOZTjj7HOazdzgKmUlJ4ZEqcy86mVFpWEDZmBkl5Z0J9ZMgrSDSaAZeaiFrZVnzfEH94lFKujfj6E8ND1qdt7Ja2RB8PO4qxJcxPKMIPXzicHdDjb0r71jJP7vl7Lz\/dCnHU5mIDag\/3quL\/tTO4wv0Bb\/L\/xvPfdZL4NpgG\/5E42jjn598hYuw+wE8CYZ1G\/9KYKmuwFFA+0BUjlk+IFXfVJF1IhSi+xBkWmKkeGRWQex4L+4RZ+ynTWAmEu\/IzIylJukVItJCh8E8UjZqpK2ScPT0+1dtAtIcmriPnZcku66DbDt7cOhPXpElOWbvzrO1N9NdLrOczz2rlQ6ZWXigRad2uug2\/4+24KOOwwI278xLKih0XdtVqrKDAGhEYzFDt+VmRxoxvuidJx6qVKEs2ZrXbU+98BgMWbyHPJW92c6\/lrdyMNUDawhv6MIuKfYJeb1YQpJs1HjKzedmPOAQ11CmWh4QnpMRjCQjN2jbCgpXPxwPMDnhSKfdRDrY2MgOcxejx56gkCWvf1Mda8bV+su4RwH15NThmWpGZyna5nCQXjQxrE8BKa0PeQIEE2P540cd7kblRb1+hF0OHEcXBuwG1Y8hMKEJx\/mwqHrwTMVwFZeJBOLwCO69QLs1eE1ya92gqrDJKlWzf+8+RXvZx1o+9iWhCbLi33i4N0qa\/lyF+2vkIfSyiC2vW0IbZ7Y8WTc9r3epGCnbbrCIGrF88Ex0hD\/eAyF5ITfraxuNwuxYY4q1inFls5AWsM63EXlPsGDPrPNfTjGQuKK+KMaLJ91DdjhItPmzIOLpIB4sDGn\/t3lQVjGIjVVPtLMS1f4vrvFh9q02Mnz\/C1nbuQN5gpzNqVRy1xiDiTVc2YkOXc2sj9KTjAygf1BJO\/FKyunKEyTBR9\/lFY7r4AOurjy6PsdkOTF7EJRhhPdl4eUfNNaj0zj+2QKiE+5JqSszlZhYW5TA1lSI9S9U8FK713pot7BoXI7j5N7nBjkfxOAjetNLGwHg77hcJMbeqFIs1Q9Wj59aysrwj7CFQGj+t9VcEvU6FWoRJG5ZN+px8\/vhMugcMrWDoY7w6nTfa1bQZLnSh8hsaFnO8znO6elrbqpCSUYyICzmvBbMEWHALPI7R5mtTIAheLUHqXNz+utppTMLV8GFdvVtNMVyF2gWOGcKtNIN\/rJtuKwkr8EYOmEmvUd3SD4njq8X7w5Xy+cMIe5+US2IBBq5hDp\/oKW2DP+G03YDFoJP\/SPa2HMYu2g72F3R1GSxtg4R3lZM7oZytuE3Reasfu2LWVFXMSvIc51Ogczl+ZkuFR13g3gesvbyfXF4TgbOCBAuWfE99RMoKWAQVDreJRAqkMSS5FvvifZFUayt\/9XphPjgLM1\/oy7oMGsAAbCzR88hnlMWGihyKgq5UqNsQNi+HOFgM3TOnBOVC7rDT1NXJnwnrW52byvdJFGyMWSGKuLuRcbol0smy1oZxaFUaR0u57lVy5vS1k4bGNl2IBqZ8Nm\/DrPhoW\/s9mQY01n1O8+i3eF5CKSUjlw0jbis8aBsIsE8Gyfbp+bnM8VC4C8eLN8cDANgY00Mb7QH8dKESJHtktBQdpQgEtAcN6wGEnzSJ3pLGQ2m\/wHmWZFn0YvzCyND9IcWBiFMoRGLLRBN0AjfEUQ+DZCjfBf6EVkx4BP5K32bxl+uJ06koZ3qe\/5ejvdLuQ2W6CH5SO1LZyTFbDEtHADBCe1gtkcKSeOCqYYc5bNjMftqnNgijedfP6veyUOUJ0YCGd6W3jfjpbHThUT+P5LXp4NFcbkAagWg1I1+uL\/rq+uljXo17Zm2AE\/FxP6q6g1IeGcMIGVQ+aRCj+Sd7FAu\/lZ+gsqlg30sw3mwmktASzHXBnlOKt9VaMi5BjQdtK+V\/0v4goQWFCLx1V42rrU072E\/jto\/tMQlX\/uis\/sp1FbLzscM7S32qO6O0YCNW7pvfhYAJOHI8h\/aXX1o+xdo2mgBeexp5uwLEPdFjxT\/e\/IrmrsZChN6NHGiomZa7WkKgKjZeaVYr2Q889w0hIL0L9Za0y5pbqXArW3oxIBo3c9aeexD1yyptfJeHNMfprOAi5OomsNpvV98p\/f5i0L8fCDUs56252PyabAsmm+sX+NtbC7paTaLIx67t0giPwPG0TyvE1GyJR9OaLhfS9E0wquLk\/cVcgU9Xgpxb4oP2CRbHZS5G1fyacFFFHm6OfA8tn16\/Sy5yX62Q=:utf-8"},"name":"CENTOS","cred_class":"static"},{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"uvQiIZUKbf2EnWfIcUxh9Ff40BcW8JQBR9yJa9IQ5hZXC\/2zKC7FVROfhErUm\/2o1KyC91HwWu1q965+fzo5fr2anh6VYy8vPW4oRpr4b\/w0kJ3QPPBucGQGWbmPmcbTlwtZEuK62jY8ju1fxWGq9tohyyXLg9h\/RmjfhxA6WMgjpcEiRrW+ycing7\/ASw6HKe\/fcPullYgEDdwEtjQAAWjwSAhUJaNKXsXIY85+CRwTM9m8MQL9BlUYy4faqhiNep8rSN1kXowPhDbfv\/JJTsQ\/S+EAdFVIPqBlXFdzaCKYPoJ0\/qmGtAgNEPTHkLX4F8i1pzvUk6Clq8cORSO94bXBu2qwZTc1WFbdnKWZ1XplzgNmG\/yZ6L1WrQcDOqH29hC4PWVBMUwbwuZ7ySCZedwlWPw\/4waXOcymdvxRbXRKXC1XD01KnUXGkYKjuonABLEocyAIEiuATEQ\/4Ws1ob50kAHzb66en92iyiru4dS229a5oG0kWi9TBu\/dNylXb7hn1QHAd3BbNa3kL6\/GLzuBq05ulgwYDIa8EO9kffKOMapR+d9IAEINW7Ki:utf-8"},"name":"Centos 2 Credential","cred_class":"static"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"FPY0Bw6Ubf6nxEbFDHRF6ysQlvOMEhoKe7U994e7niDINDMsyMsHnGxP4PQ=:utf-8"},"name":"CalmVM_Cred","cred_class":"static"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"0j3TER9odpO5VFm\/+04GAe4Wg\/+yV4MxMfJScb4DP62ricC3nh8ufplxfpY=:utf-8"},"name":"PC_Admin","cred_class":"static"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"DH4+kpQqQca3ndW\/r+UF+F6\/OSwGcHgVU\/Fln4W5tFC2qDEBwbgVX46xpjc1Bg==:utf-8"},"name":"PE_Admin","cred_class":"static"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Karbon"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Base Setup"},{"kind":"app_task","name":"GetNetworkUUID"},{"kind":"app_task","name":"Get Prism Element Cluster"},{"kind":"app_task","name":"Install Kubectl"},{"kind":"app_task","name":"CreateK8sCluster"},{"kind":"app_task","name":"Delay for 10 mins"},{"kind":"app_task","name":"Check Cluster Health Status"}],"name":"05c04739_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetNetworkUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"}},{"from_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"CreateK8sCluster"}},{"from_task_reference":{"kind":"app_task","name":"CreateK8sCluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delay for 10 mins"}},{"from_task_reference":{"kind":"app_task","name":"Delay for 10 mins"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check Cluster Health Status"}},{"from_task_reference":{"kind":"app_task","name":"Base Setup"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Kubectl"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Base Setup","attrs":{"exit_status":[],"script":"#sudo apt-get -y update\n#sudo apt install -y curl\nsudo yum update -y\nsudo yum install -y curl\n\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetNetworkUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\n\nuser = \"@@{CalmVM_Cred.username}@@\"\npassword = \"@@{CalmVM_Cred.secret}@@\"\n\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n \"filter\": \"name==@@{calm_project_name}@@\"\n}\n\n\n# Set the address and make projects call\n#url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/projects\/list\"\nurl = \"https:\/\/@@{CalmVM_IP}@@:9440\/api\/nutanix\/v3\/projects\/list\"\n\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False, auth=\"BASIC\", user=user, passwd=password)\n\n# If the call went through successfully, find the project by name\nif resp.ok:\n  for entity in json.loads(resp.content)['entities']:\n    if entity['status']['name'] == '@@{calm_project_name}@@':\n      # if CalmVM_IP is in the same PC\n      if \"@@{CalmVM_IP}@@\" == \"@@{PC_IP}@@\":\n        for subnet in entity['status']['resources']['subnet_reference_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n      else: #CalmVM is in different PC\n        # This approach may retrieve the wrong subnet uuid under the following conditions:\n        #  1.  Calm VM has multiple account provider with the same subnet name.  Eg cluster 218 with primary subnet and cluster 170 with primary subnet\n        #  Workaround:\n        #    Change the name of the subnet from primary to primary_218 for cluster 218 and from primary to primary_170 to cluster_170\n        for subnet in entity['spec']['resources']['external_network_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n        \n# If the call failed\nelse:\n  print \"Projects call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: '@@{calm_project_name}@@' project was not found.\"\nexit(0)","eval_variables":["SUBNET_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Prism Element Cluster","attrs":{"exit_status":[],"script":"user = \"@@{PE_Admin.username}@@\"\npassword = \"@@{PE_Admin.secret}@@\"\nip = \"@@{PE_IP}@@\"\n\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\npayload = {}\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/cluster\"\nurl = base_url + \"\/\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\n\ncluster_list = []\ncluster_list_json = r.json()\n\nprint \"PE_Cluster_UUID={}\".format(cluster_list_json['uuid'])\n\n","eval_variables":["PE_Cluster_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Install Kubectl","attrs":{"exit_status":[],"script":"curl -LO https:\/\/storage.googleapis.com\/kubernetes-release\/release\/$(curl -s https:\/\/storage.googleapis.com\/kubernetes-release\/release\/stable.txt)\/bin\/linux\/amd64\/kubectl\nchmod +x .\/kubectl\nsudo mv .\/kubectl \/usr\/local\/bin\/kubectl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"CreateK8sCluster","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nworker_node_memory = 1024 * @@{worker_node_memory}@@\nworker_node_disk = 1024 * @@{worker_node_disk_size}@@\n\npayload = {\n  \"cni_config\": {\n    \"node_cidr_mask_size\": 24, #Allow up to 255 pods per node\n    \"pod_ipv4_cidr\": \"@@{pod_cidr_range}@@\",\n    \"service_ipv4_cidr\": \"@@{service_cidr_range}@@\"\n  },\n  \"etcd_config\": {\n   \n  },\n  \"masters_config\": {\n    \n  },\n  \"metadata\": {\n    \"api_version\": \"v1.0.0\"\n  },\n  \"name\": \"@@{cluster_name}@@\",\n  \"storage_class_config\": {\n    \"default_storage_class\": True,\n    \"name\": \"default-storageclass\",\n    \"reclaim_policy\": \"Delete\",\n    \"volumes_config\": {\n      \"file_system\": \"@@{file_system}@@\",\n      \"flash_mode\": False,\n      \"password\": \"@@{PE_Admin.secret}@@\",\n      \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\",\n      \"storage_container\": \"@@{Storage_Container}@@\",\n      \"username\": \"@@{PE_Admin.username}@@\"\n    }\n  },\n  \"version\": \"@@{K8S_Version}@@\",\n  \"workers_config\": {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": @@{worker_node_cpu}@@,\n        \"disk_mib\": worker_node_disk,\n        \"memory_mib\": worker_node_memory,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"worker-node-pool\",\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": @@{No_Worker_Node}@@\n    }]\n  }\n}\n\n\nif (\"@@{Kubernetes_Node_Network}@@\" == \"Flannel\"):\n  print \"Configuring Flannel CNI\"\n # payload = json.loads(karbon_config)\n  payload['cni_config']['flannel_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{pod_cidr_range}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nelse:\n  print \"Configuring Calico CNI\"\n  #payload = json.loads(karbon_config)\n  payload['cni_config']['calico_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{calico_cidr}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nif (\"@@{Master_Config}@@\" == \"Single Master\"):\n  print \"Configuring Single Master\"\n  master_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }],\n    \"single_master_config\": { \n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    }\n  }\n  payload['masters_config'] = master_pool  \n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelif (\"@@{Master_Config}@@\" == \"Active-Passive\"):\n  print \"Configuring Active-Passive Master\"\n  master_pool = { \n    \"active_passive_config\": {\n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    },\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelse:\n  print \"Configuring Active-Active LoadBalancer Master\"\n  master_pool = {\n    \"external_lb_config\": {\n      \"external_ipv4_address\": \"@@{External_LB}@@\",\n      \"master_nodes_config\": [\n      {\n        \"ipv4_address\": \"@@{Master_VIP}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      },\n      {\n        \"ipv4_address\": \"@@{Master_VIP2}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      }\n    ]},\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]  \n  }\n  payload['etcd_config'] = etcd_pool\nprint json.dumps(payload)\n\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\"\n\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster create was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delay for 10 mins","attrs":{"type":"","interval_secs":700},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check Cluster Health Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 20):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    print \"Cluster creation was successful\", json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n  \n  elif (resp.status_code == 412):\n    print \"Cluster Health: K8s cluster deployment not ready.  Sleeping for 60 seconds\"\n    count = count + 1\n    sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Cluster creation failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 20 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"50d9dd98_runbook","main_task_local_reference":{"kind":"app_task","name":"05c04739_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete K8S cluster"}],"name":"1b7e445c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete K8S cluster","attrs":{"script":"  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n}\n      \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nresp = urlreq(url, verb='DELETE',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster delete was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster delete failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"9500032c_runbook","main_task_local_reference":{"kind":"app_task","name":"1b7e445c_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Karbon"}],"name":"Package2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetNetworkUUID"},{"kind":"app_task","name":"Install Curl"},{"kind":"app_task","name":"Get Prism Element Cluster"},{"kind":"app_task","name":"Install Kubectl"},{"kind":"app_task","name":"Create K8S Cluster"},{"kind":"app_task","name":"Delay for 10 mins"},{"kind":"app_task","name":"Check Cluster Health Status"}],"name":"e9398a12_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetNetworkUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"}},{"from_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create K8S Cluster"}},{"from_task_reference":{"kind":"app_task","name":"Create K8S Cluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delay for 10 mins"}},{"from_task_reference":{"kind":"app_task","name":"Delay for 10 mins"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check Cluster Health Status"}},{"from_task_reference":{"kind":"app_task","name":"Install Curl"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Kubectl"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetNetworkUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\nuser = \"@@{CalmVM_Cred.username}@@\" \npassword = \"@@{CalmVM_Cred.secret}@@\"\n\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n \"filter\": \"name==@@{calm_project_name}@@\"\n}\n\n\n# Set the address and make projects call\n#url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/projects\/list\"\nurl = \"https:\/\/@@{CalmVM_IP}@@:9440\/api\/nutanix\/v3\/projects\/list\"\n\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False, auth=\"BASIC\", user=user, passwd=password)\n\n# If the call went through successfully, find the project by name\nif resp.ok:\n  for entity in json.loads(resp.content)['entities']:\n    if entity['status']['name'] == '@@{calm_project_name}@@':\n      # if CalmVM_IP is in the same PC\n      if \"@@{CalmVM_IP}@@\" == \"@@{PC_IP}@@\":\n        for subnet in entity['status']['resources']['subnet_reference_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n      else: #CalmVM is in different PC\n        for subnet in entity['spec']['resources']['external_network_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n        \n# If the call failed\nelse:\n  print \"Projects call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: '@@{calm_project_name}@@' project was not found.\"\nexit(0)","eval_variables":["SUBNET_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Install Curl","attrs":{"exit_status":[],"script":"#sudo apt-get -y update\n#sudo apt install -y curl\nsudo yum update -y\nsudo yum install -y curl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Prism Element Cluster","attrs":{"exit_status":[],"script":"user = \"@@{PE_Admin.username}@@\"\npassword = \"@@{PE_Admin.secret}@@\"\nip = \"@@{PE_IP}@@\"\n\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\npayload = {}\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/cluster\"\nurl = base_url + \"\/\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\n\ncluster_list = []\ncluster_list_json = r.json()\n\nprint \"PE_Cluster_UUID={}\".format(cluster_list_json['uuid'])\n\n","eval_variables":["PE_Cluster_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Install Kubectl","attrs":{"exit_status":[],"script":"curl -LO https:\/\/storage.googleapis.com\/kubernetes-release\/release\/$(curl -s https:\/\/storage.googleapis.com\/kubernetes-release\/release\/stable.txt)\/bin\/linux\/amd64\/kubectl\nchmod +x .\/kubectl\nsudo mv .\/kubectl \/usr\/local\/bin\/kubectl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create K8S Cluster","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nworker_node_memory = 1024 * @@{worker_node_memory}@@\nworker_node_disk = 1024 * @@{worker_node_disk_size}@@\n\npayload = {\n  \"cni_config\": {\n    \"node_cidr_mask_size\": 24, #Allow up to 255 pods per node\n    \"pod_ipv4_cidr\": \"@@{pod_cidr_range}@@\",\n    \"service_ipv4_cidr\": \"@@{service_cidr_range}@@\"\n  },\n  \"etcd_config\": {\n   \n  },\n  \"masters_config\": {\n    \n  },\n  \"metadata\": {\n    \"api_version\": \"v1.0.0\"\n  },\n  \"name\": \"@@{cluster_name}@@\",\n  \"storage_class_config\": {\n    \"default_storage_class\": True,\n    \"name\": \"default-storageclass\",\n    \"reclaim_policy\": \"Delete\",\n    \"volumes_config\": {\n      \"file_system\": \"@@{file_system}@@\",\n      \"flash_mode\": False,\n      \"password\": \"@@{PE_Password}@@\",\n      \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\",\n      \"storage_container\": \"@@{Storage_Container}@@\",\n      \"username\": \"@@{PE_Username}@@\"\n    }\n  },\n  \"version\": \"@@{K8S_Version}@@\",\n  \"workers_config\": {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": @@{worker_node_cpu}@@,\n        \"disk_mib\": worker_node_disk,\n        \"memory_mib\": worker_node_memory,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"worker-node-pool\",\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": @@{No_Worker_Node}@@\n    }]\n  }\n}\n\n\nif (\"@@{Kubernetes_Node_Network}@@\" == \"Flannel\"):\n  print \"Configuring Flannel CNI\"\n # payload = json.loads(karbon_config)\n  payload['cni_config']['flannel_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{pod_cidr_range}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nelse:\n  print \"Configuring Calico CNI\"\n  #payload = json.loads(karbon_config)\n  payload['cni_config']['calico_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{calico_cidr}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nif (\"@@{Master_Config}@@\" == \"Single Master\"):\n  print \"Configuring Single Master\"\n  master_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }],\n    \"single_master_config\": { \n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    }\n  }\n  payload['masters_config'] = master_pool  \n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelif (\"@@{Master_Config}@@\" == \"Active-Passive\"):\n  print \"Configuring Active-Passive Master\"\n  master_pool = { \n    \"active_passive_config\": {\n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    },\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelse:\n  print \"Configuring Active-Active LoadBalancer Master\"\n  master_pool = {\n    \"external_lb_config\": {\n      \"external_ipv4_address\": \"@@{External_LB}@@\",\n      \"master_nodes_config\": [\n      {\n        \"ipv4_address\": \"@@{Master_VIP}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      },\n      {\n        \"ipv4_address\": \"@@{Master_VIP2}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      }\n    ]},\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]  \n  }\n  payload['etcd_config'] = etcd_pool\nprint json.dumps(payload)\n\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\"\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster create was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delay for 10 mins","attrs":{"type":"","interval_secs":600},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check Cluster Health Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    print \"Cluster creation was successful\", json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n  \n  elif (resp.status_code == 412):\n    print \"Cluster Health: K8s cluster deployment not ready.  Sleeping for 60 seconds\"\n    count = count + 1\n    sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Cluster creation failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 20 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cf0f7a75_runbook","main_task_local_reference":{"kind":"app_task","name":"e9398a12_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"uninstall k8s cluster"}],"name":"810ec696_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"uninstall k8s cluster","attrs":{"script":"  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n}\n      \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nresp = urlreq(url, verb='DELETE',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster delete was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster delete failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"1b6afbce_runbook","main_task_local_reference":{"kind":"app_task","name":"810ec696_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Karbon"}],"name":"Package3","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package3"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetNetworkUUID"},{"kind":"app_task","name":"Install Curl"},{"kind":"app_task","name":"Get Prism Element Cluster"},{"kind":"app_task","name":"Install Kubectl"},{"kind":"app_task","name":"Create K8S Cluster"},{"kind":"app_task","name":"Delay for 10 mins"},{"kind":"app_task","name":"Check cluster Health Status"}],"name":"c06b8ad6_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetNetworkUUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"}},{"from_task_reference":{"kind":"app_task","name":"Get Prism Element Cluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create K8S Cluster"}},{"from_task_reference":{"kind":"app_task","name":"Create K8S Cluster"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delay for 10 mins"}},{"from_task_reference":{"kind":"app_task","name":"Delay for 10 mins"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check cluster Health Status"}},{"from_task_reference":{"kind":"app_task","name":"Install Curl"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Kubectl"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetNetworkUUID","attrs":{"exit_status":[],"script":"## Get Karbon Image UUID\n# Set the headers, payload, and cookies\nuser = \"@@{CalmVM_Cred.username}@@\"\npassword = \"@@{CalmVM_Cred.secret}@@\"\n\n\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n \"filter\": \"name==@@{calm_project_name}@@\"\n}\n\n\n# Set the address and make projects call\n#url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/projects\/list\"\nurl = \"https:\/\/@@{CalmVM_IP}@@:9440\/api\/nutanix\/v3\/projects\/list\"\n\nresp = urlreq(url, verb='POST', params=json.dumps(payload), headers=headers, verify=False, auth=\"BASIC\", user=user, passwd=password)\n\n# If the call went through successfully, find the project by name\nif resp.ok:\n  for entity in json.loads(resp.content)['entities']:\n    if entity['status']['name'] == '@@{calm_project_name}@@':\n      # if CalmVM_IP is in the same PC\n      if \"@@{CalmVM_IP}@@\" == \"@@{PC_IP}@@\":\n        for subnet in entity['status']['resources']['subnet_reference_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n      else: #CalmVM is in different PC\n        for subnet in entity['spec']['resources']['external_network_list']:\n          if subnet['name'] == '@@{network_name}@@':\n            print \"SUBNET_UUID={0}\".format(subnet['uuid'])\n            exit(0)\n        else:\n          print \"Network '@@{network_name}@@' is not available in project '@@{calm_project_name}@@'.  Please check the network name and try again.\"\n          exit(1)\n        \n# If the call failed\nelse:\n  print \"Projects call failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# If we made it this far, there was an error\nprint \"ERROR: '@@{calm_project_name}@@' project was not found.\"\nexit(0)","eval_variables":["SUBNET_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Install Curl","attrs":{"exit_status":[],"script":"#sudo apt-get -y update\n#sudo apt install -y curl\nsudo yum update -y\nsudo yum install -y curl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Get Prism Element Cluster","attrs":{"exit_status":[],"script":"user = \"@@{PE_Admin.username}@@\"\npassword = \"@@{PE_Admin.secret}@@\"\nip = \"@@{PE_IP}@@\"\n\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\npayload = {}\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/cluster\"\nurl = base_url + \"\/\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\n\ncluster_list = []\ncluster_list_json = r.json()\n\nprint \"PE_Cluster_UUID={}\".format(cluster_list_json['uuid'])\n\n","eval_variables":["PE_Cluster_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Install Kubectl","attrs":{"exit_status":[],"script":"curl -LO https:\/\/storage.googleapis.com\/kubernetes-release\/release\/$(curl -s https:\/\/storage.googleapis.com\/kubernetes-release\/release\/stable.txt)\/bin\/linux\/amd64\/kubectl\nchmod +x .\/kubectl\nsudo mv .\/kubectl \/usr\/local\/bin\/kubectl","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create K8S Cluster","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nworker_node_memory = 1024 * @@{worker_node_memory}@@\nworker_node_disk = 1024 * @@{worker_node_disk_size}@@\n\npayload = {\n  \"cni_config\": {\n    \"node_cidr_mask_size\": 24, #Allow up to 255 pods per node\n    \"pod_ipv4_cidr\": \"@@{pod_cidr_range}@@\",\n    \"service_ipv4_cidr\": \"@@{service_cidr_range}@@\"\n  },\n  \"etcd_config\": {\n   \n  },\n  \"masters_config\": {\n    \n  },\n  \"metadata\": {\n    \"api_version\": \"v1.0.0\"\n  },\n  \"name\": \"@@{cluster_name}@@\",\n  \"storage_class_config\": {\n    \"default_storage_class\": True,\n    \"name\": \"default-storageclass\",\n    \"reclaim_policy\": \"Delete\",\n    \"volumes_config\": {\n      \"file_system\": \"@@{file_system}@@\",\n      \"flash_mode\": False,\n      \"password\": \"@@{PE_Password}@@\",\n      \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\",\n      \"storage_container\": \"@@{Storage_Container}@@\",\n      \"username\": \"@@{PE_Username}@@\"\n    }\n  },\n  \"version\": \"@@{K8S_Version}@@\",\n  \"workers_config\": {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": @@{worker_node_cpu}@@,\n        \"disk_mib\": worker_node_disk,\n        \"memory_mib\": worker_node_memory,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"worker-node-pool\",\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": @@{No_Worker_Node}@@\n    }]\n  }\n}\n\n\nif (\"@@{Kubernetes_Node_Network}@@\" == \"Flannel\"):\n  print \"Configuring Flannel CNI\"\n # payload = json.loads(karbon_config)\n  payload['cni_config']['flannel_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{pod_cidr_range}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nelse:\n  print \"Configuring Calico CNI\"\n  #payload = json.loads(karbon_config)\n  payload['cni_config']['calico_config'] = {\n    \"ip_pool_configs\": [{\n      \"cidr\": \"@@{calico_cidr}@@\"\n    }]\n    \n  }\n  #payload['cni_config'].insert(0, cni)\nif (\"@@{Master_Config}@@\" == \"Single Master\"):\n  print \"Configuring Single Master\"\n  master_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }],\n    \"single_master_config\": { \n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    }\n  }\n  payload['masters_config'] = master_pool  \n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 1\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelif (\"@@{Master_Config}@@\" == \"Active-Passive\"):\n  print \"Configuring Active-Passive Master\"\n  master_pool = { \n    \"active_passive_config\": {\n      \"external_ipv4_address\": \"@@{Master_VIP}@@\"\n    },\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]\n  }\n  payload['etcd_config'] = etcd_pool\nelse:\n  print \"Configuring Active-Active LoadBalancer Master\"\n  master_pool = {\n    \"external_lb_config\": {\n      \"external_ipv4_address\": \"@@{External_LB}@@\",\n      \"master_nodes_config\": [\n      {\n        \"ipv4_address\": \"@@{Master_VIP}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      },\n      {\n        \"ipv4_address\": \"@@{Master_VIP2}@@\",\n        \"node_pool_name\": \"@@{cluster_name}@@\"\n      }\n    ]},\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 122880,\n        \"memory_mib\": 4096,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"master-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 2\n    }]\n  }\n  payload['masters_config'] = master_pool\n  etcd_pool = {\n    \"node_pools\": [\n    {\n      \"ahv_config\": {\n        \"cpu\": 2,\n        \"disk_mib\": 40960,\n        \"memory_mib\": 8192,\n        \"network_uuid\": \"@@{SUBNET_UUID}@@\",\n        \"prism_element_cluster_uuid\": \"@@{PE_Cluster_UUID}@@\"\n      },\n      \"name\": \"etcd-node-pool\", #name of the node pool\n      \"node_os_version\": \"@@{image_name}@@\",\n      \"num_instances\": 3\n    }]  \n  }\n  payload['etcd_config'] = etcd_pool\nprint json.dumps(payload)\n\n  \npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\"\nresp = urlreq(url, verb='POST',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster create was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster create failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delay for 10 mins","attrs":{"type":"","interval_secs":600},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Check cluster Health Status","attrs":{"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\ncount = 0\nwhile(count < 10):\n  # Set the address and make images call\n  #url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  url = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/health\"\n  resp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\n  if resp.ok:\n    print \"Cluster creation was successful\", json.dumps(json.loads(resp.content), indent=4)\n    exit(0)\n  \n  elif (resp.status_code == 412):\n    print \"Cluster Health: K8s cluster deployment not ready.  Sleeping for 60 seconds\"\n    count = count + 1\n    sleep(60) #Sleep for 1 min\n  # If the call failed\n  else:\n    print \"Cluster creation failed\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nprint \"Error: Operation Timeout after 20 mins\"\nexit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cf93b4ad_runbook","main_task_local_reference":{"kind":"app_task","name":"c06b8ad6_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package3"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"destroy k8s cluster"}],"name":"a892eed8_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"destroy k8s cluster","attrs":{"script":"  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n}\n      \npc_user = '@@{PC_Username}@@'\npc_pass = '@@{PC_Password}@@'\n\n  # Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\"\nresp = urlreq(url, verb='DELETE',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  print \"Cluster delete was successful\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n\n  # If the call failed\nelse:\n  print \"Cluster delete failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d939a71a_runbook","main_task_local_reference":{"kind":"app_task","name":"a892eed8_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"AHV_78","version":"","options":{"type":"","name":"AHV_78","resources":{"image_type":"DISK_IMAGE","checksum":{"checksum_algorithm":"","type":"","checksum_value":""},"source_uri":"http:\/\/download.nutanix.com\/Calm\/CentOS-7-x86_64-2003.qcow2","version":{"product_version":"7_8","type":"","product_name":"AHV"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Centos_Terraform"}],"name":"Package5","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package5"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"instal dependencies"},{"kind":"app_task","name":"add user"},{"kind":"app_task","name":"pull kubeflow dependecies"},{"kind":"app_task","name":"set dependencies"},{"kind":"app_task","name":"init terraform"},{"kind":"app_task","name":"download kubeconfig"},{"kind":"app_task","name":"delay"},{"kind":"app_task","name":"generate kubeconfig"},{"kind":"app_task","name":"run kubeflow"}],"name":"32ae684d_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"add user"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"pull kubeflow dependecies"}},{"from_task_reference":{"kind":"app_task","name":"instal dependencies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"delay"}},{"from_task_reference":{"kind":"app_task","name":"delay"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"add user"}},{"from_task_reference":{"kind":"app_task","name":"download kubeconfig"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"set dependencies"}},{"from_task_reference":{"kind":"app_task","name":"set dependencies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"init terraform"}},{"from_task_reference":{"kind":"app_task","name":"pull kubeflow dependecies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"generate kubeconfig"}},{"from_task_reference":{"kind":"app_task","name":"generate kubeconfig"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"download kubeconfig"}},{"from_task_reference":{"kind":"app_task","name":"init terraform"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"run kubeflow"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"instal dependencies","attrs":{"exit_status":[],"script":"sudo yum update -y\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https:\/\/rpm.releases.hashicorp.com\/RHEL\/hashicorp.repo\nsudo yum -y install terraform\nsudo yum install git -y\nsudo yum install wget -y\nsudo yum install curl -y\nsudo yum install unzip -y\ncat <<EOF | sudo tee \/etc\/yum.repos.d\/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https:\/\/pkgs.k8s.io\/core:\/stable:\/v1.28\/rpm\/\nenabled=1\ngpgcheck=1\ngpgkey=https:\/\/pkgs.k8s.io\/core:\/stable:\/v1.28\/rpm\/repodata\/repomd.xml.key\nEOF\nsudo yum install -y kubectl\nsudo wget https:\/\/github.com\/kubernetes-sigs\/kustomize\/releases\/download\/kustomize%2Fv5.0.1\/kustomize_v5.0.1_linux_amd64.tar.gz\nsudo tar -xf kustomize_v5.0.1_linux_amd64.tar.gz\nsudo mv kustomize \/bin\/\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"add user","attrs":{"exit_status":[],"script":"sudo useradd tf; echo nutanix\/4u | sudo passwd tf --stdin\nsudo usermod -aG wheel tf","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"pull kubeflow dependecies","attrs":{"exit_status":[],"script":"cd \/\nsudo mkdir kubeflow\ncd kubeflow\nsudo git clone -b release-v1.7 https:\/\/github.com\/nutanix\/kubeflow-manifests.git \ncd \/kubeflow\/kubeflow-manifests\/automation\/terraform\/install_kubeflow","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"set dependencies","attrs":{"exit_status":[],"script":"cd \/kubeflow\/kubeflow-manifests\/automation\/terraform\/install_kubeflow\necho 'prism_central_username = \"@@{PC_Username}@@\"\nprism_central_password = \"@@{PC_Password}@@\"\nprism_central_endpoint = \"@@{PC_IP}@@\"\nkarbon_cluster_name    = \"@@{cluster_name}@@\"\nkubeconfig_filename    = \"@@{cluster_name}@@-kubectl.cfg\"\nkubeflow_version       = \"1.7.0\"' | sudo tee env.tfvars","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"init terraform","attrs":{"exit_status":[],"script":"cd \/kubeflow\/kubeflow-manifests\/automation\/terraform\/install_kubeflow\nsudo terraform init\nsudo terraform plan --var-file=env.tfvars\nsudo terraform apply --var-file=env.tfvars -auto-approve\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"download kubeconfig","attrs":{"exit_status":[],"script":"\necho \"\n# -*- mode: yaml; -*-\n# vim: syntax=yaml\n#\napiVersion: v1\nkind: Config\nclusters:\n- name: @@{cluster_name}@@\n  cluster:\n    server: @@{src_server}@@\n    @@{src_ca}@@ \nusers:\n- name: default-user-@@{cluster_name}@@\n  user:\n    @@{src_token}@@\ncontexts:\n- context:\n    cluster: @@{cluster_name}@@\n    user: default-user-@@{cluster_name}@@\n  name: @@{cluster_name}@@-context\ncurrent-context: @@{cluster_name}@@-context\" | sudo tee \/kubeflow\/kubeflow-manifests\/automation\/terraform\/install_kubeflow\/@@{cluster_name}@@-kubectl.cfg\n\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"delay","attrs":{"type":"","interval_secs":360},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"generate kubeconfig","attrs":{"exit_status":[],"script":"payload ={}\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npc_user = '@@{PC_Admin.username}@@'\npc_pass = '@@{PC_Admin.secret}@@'\n\n# Set the address and make images call\n#url = \"https:\/\/localhost:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/kubeconfig\"\nurl = \"https:\/\/@@{PC_IP}@@:9440\/karbon\/v1\/k8s\/clusters\/@@{cluster_name}@@\/kubeconfig\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\nkubeconfig = resp.json()\n \n \nkubearray = kubeconfig['kube_config'].splitlines()\nprint \"src_server={}\".format(kubearray[8].rstrip('server:')[12:])\nprint \"src_ca={}\".format(kubearray[9].rstrip('certificate-authority-data:'))\nprint \"src_token={}\".format(kubearray[13].rstrip('token:'))\n#print \"src_kubeconfig={}\".format(kubeconfig['kube_config'])","eval_variables":["src_server","src_ca","src_token"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Centos_Terraform"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"run kubeflow","attrs":{"exit_status":[],"script":"cd \/kubeflow\/kubeflow-manifests\/automation\/terraform\/install_kubeflow\nexport KUBECONFIG=@@{cluster_name}@@-kubectl.cfg\nkubectl port-forward -n istio-system svc\/istio-ingressgateway --address 0.0.0.0 8080:80","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"49a588b0_runbook","main_task_local_reference":{"kind":"app_task","name":"32ae684d_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package5"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"e1b36c73_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"82fee632_runbook","main_task_local_reference":{"kind":"app_task","name":"e1b36c73_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Centos_Terraform"}],"name":"Package6","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package6"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"0b47888c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"865ffcc6_runbook","main_task_local_reference":{"kind":"app_task","name":"0b47888c_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package6"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"c771a3db_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d948526_runbook","main_task_local_reference":{"kind":"app_task","name":"c771a3db_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Centos_Terraform"}],"name":"Package7","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package7"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"55aa3d43_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"32da690f_runbook","main_task_local_reference":{"kind":"app_task","name":"55aa3d43_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package7"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"247c3b6d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3d1f0f77_runbook","main_task_local_reference":{"kind":"app_task","name":"247c3b6d_dag"},"variable_list":[]},"upgrade_runbook":{}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"75513331_deployment","min_replicas":"1","default_replicas":"","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"Karbon_AHV"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"ad89a3ef_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package5"}],"substrate_local_reference":{"kind":"app_substrate","name":"Centos_TF"},"variable_list":[],"description":""}],"environment_reference_list":[],"application_url":"","description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Download Kube Config"}],"name":"7a3a04d1_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Download Kube Config","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b8611983_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"d1a80d97_runbook","main_task_local_reference":{"kind":"app_task","name":"7a3a04d1_dag"},"variable_list":[]},"name":"Download Kube Config"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Add Worker Node in NodePool"}],"name":"12ed06e6_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Add Worker Node in NodePool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"1f1ffd77_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"e98bce03_runbook","main_task_local_reference":{"kind":"app_task","name":"12ed06e6_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"add_worker_node_count","value":"1","label":"Please key in the no of worker nodes to add","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the node pool name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{add_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'demo4Nutanix#'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Add Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Download Kube Config"}],"name":"7ad5f71c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Download Kube Config","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b8611983_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"f1622597_runbook","main_task_local_reference":{"kind":"app_task","name":"7ad5f71c_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"remove_worker_node_count","value":"1","label":"Please key in the no of worker nodes to remove","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{remove_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'demo4Nutanix#'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Node Pool"}],"name":"dc8b0c5a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"f5aeeff9_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"3b825c85_runbook","main_task_local_reference":{"kind":"app_task","name":"dc8b0c5a_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"gpu_model","value":"Nvidia A100","label":"Please key in the GPU Model","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"The default value is 120 GB per node","data_type":"BASE","type":"LOCAL","name":"node_disk_mib","value":"122880","label":"Please key in the hard disk per node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_memory_mib","value":"8192","label":"Please key in the node memory in Mib","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_cpu","value":"8","label":"Please key in the number of vCPU for the node pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"num_nodes","value":"1","label":"Please key in the number of nodes in the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"Please key in the new Node Pool Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Create New Pool Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Node Pool"}],"name":"a5cc25bd_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"5d110e2f_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"066b11d8_runbook","main_task_local_reference":{"kind":"app_task","name":"a5cc25bd_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the node pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \n}\n  \npc_user = 'admin'\npc_pass = 'demo4Nutanix#'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetSSHKey"}],"name":"ddc1f815_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetSSHKey","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"e3bea0da_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"cc4204d9_runbook","main_task_local_reference":{"kind":"app_task","name":"ddc1f815_dag"},"variable_list":[]},"name":"GetSSHKey"},{"description":"Updates OS nodes of your Karbon cluster","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update NodeOS"}],"name":"df56608e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update NodeOS","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b1048112_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"1dbaf7ea_runbook","main_task_local_reference":{"kind":"app_task","name":"df56608e_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Target_OS","value":"","label":"Target OS Version available :","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['node_os_images'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['node_os_images']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Update NodeOS"},{"description":"Updates Kubernetes of your Karbon cluster","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update k8s"}],"name":"f0e78072_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update k8s","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"6f43dd04_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"70204658_runbook","main_task_local_reference":{"kind":"app_task","name":"f0e78072_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DRAINTIMEOUT","value":"180","label":"Drain timeout (in s)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Only the k8s version compliant with your node OS are displayed","data_type":"BASE","type":"EXEC_LOCAL","name":"Kube_Target","value":"","label":"Target Version","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\",\n  \"length\": 250\n}\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['ntnx_k8s_releases'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['ntnx_k8s_releases']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Update Kubernetes version"}],"name":"Single Master","restore_config_list":[],"snapshot_config_list":[],"patch_list":[],"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_IP","value":"192.168.100.31","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"CalmVM_IP is used to capture the Calm VM IP.  If Calm is in the same PC, CalmVM_IP value will be the same as PC_IP","data_type":"BASE","type":"LOCAL","name":"CalmVM_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"This field was applicable when Calico was chosen as the K8S Network ","data_type":"BASE","type":"LOCAL","name":"calico_cidr","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":true,"value":""},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"pod_cidr_range","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"service_cidr_range","value":"172.19.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_cpu","value":"4","label":"Please key in the Worker Node CPU","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_memory","value":"8","label":"Worker Node Memory (Gb)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_disk_size","value":"120","label":"Worker Node Disk Size (Gb)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Applicable for Active-Active Master with Load Balancer option","data_type":"BASE","type":"LOCAL","name":"External_LB","value":"10.38.218.103","label":"Please key in the external Load Balancer","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"This field is applicable for load balancer Master Nodes","data_type":"BASE","type":"LOCAL","name":"Master_VIP2","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Applicable for Master Active Passive configuration only","data_type":"BASE","type":"LOCAL","name":"Master_VIP","value":"","label":"Master VIP","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"No_Worker_Node","value":"1","label":"Number of Worker Node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"file_system","value":"ext4","label":"Select the File System for the Storage Class","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ext4","xfs"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"image_name","value":"","label":"Please select the Image Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\",\n  \"length\": 250\n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/images\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nimage_list = []\nimage_list_json = r.json()\nfor image in image_list_json['entities']:\n # print image['spec']['name']\n  if 'ntnx-' in image['spec']['name'] and 'msp' not in image['spec']['name']: #sometimes this value will be '{}'\n    image_name = image['spec']['name']\n    image_name = image_name.replace('karbon-','')\n    image_list.append(\"{}\".format(image_name))\n\nprint ','.join(image_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"network_name","value":"","label":"Please select the network","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"subnet\"\n  \n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/subnets\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  subnet_list.append(\"{}\".format(subnet['spec']['name']))\n  \nprint ','.join(subnet_list)\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Storage_Container","value":"","label":"Please select the Storage Container in the Cluster","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \n}\n \n#print \"PE IP: {}\".format(ip)\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\nurl = base_url \nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsc_list = []\nsc_list_json = r.json()\nfor sc in sc_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  sc_list.append(\"{}\".format(sc['name']))\n  \nprint ','.join(sc_list)    \n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"Kubernetes_Node_Network","value":"Flannel","label":"Please select the Kubernetes Node Network","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Flannel","Calico"]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"LIST","type":"LOCAL","name":"Master_Config","value":"Single Master","label":"Select the Type of Master Node","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":["Single Master","Active-Passive","Active-Active Load Balancer"]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"K8S_Version","value":"","label":"Please select the Kubernetes version","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n}\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/acs\/k8sversion\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nk8s_list_tmp = []\nk8s_list_json = r.json()\n\n\nfor tmp in range(len( k8s_list_json )):\n  k8s_list_tmp.append(k8s_list_json[tmp]['k8sversion'])\n\n#Sort and keep unique stuff\nk8s_list = sorted(set(k8s_list_tmp))  \n  \nprint ','.join(k8s_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool","value":"worker-node-pool","label":"Please key in the Worker Node Pool Name","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"","label":"Please key in the Kubernetes Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Username","value":"admin","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Password","value":"Tabeldata\/4u!!","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Username","value":"admin","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Password","value":"Tabeldata\/4u","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"ec3c7adf_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Karbon_AHV_2"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"02c86008_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package6"}],"substrate_local_reference":{"kind":"app_substrate","name":"VM5"},"variable_list":[],"description":""}],"environment_reference_list":[],"application_url":"","description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Download Kube Config"}],"name":"d39ea149_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Download Kube Config","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b8611983_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"20b8f5b4_runbook","main_task_local_reference":{"kind":"app_task","name":"d39ea149_dag"},"variable_list":[]},"name":"Download Kube Config"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Add Worker Node in NodePool"}],"name":"f4812754_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Add Worker Node in NodePool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"1f1ffd77_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"05f61a5e_runbook","main_task_local_reference":{"kind":"app_task","name":"f4812754_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"add_worker_node_count","value":"1","label":"Please key in the no of worker nodes to add","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the node pool name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{add_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Add Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Worker Node in Node Pool"}],"name":"4bc6f12a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Worker Node in Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"c4689df3_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"9512df7a_runbook","main_task_local_reference":{"kind":"app_task","name":"4bc6f12a_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"remove_worker_node_count","value":"1","label":"Please key in the no of worker nodes to remove","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{remove_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Node Pool"}],"name":"2c2f7484_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"f5aeeff9_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"7c0f600b_runbook","main_task_local_reference":{"kind":"app_task","name":"2c2f7484_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"gpu_model","value":"Nvidia A100","label":"Please key in the GPU Model","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_disk_mib","value":"122880","label":"Please key in the hard disk per node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_memory_mib","value":"8192","label":"Please key in the node memory in Mib","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_cpu","value":"8","label":"Please key in the number of vCPU for the node pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"num_nodes","value":"1","label":"Please key in the number of nodes in the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"Please key in the new Node Pool Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Create New Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Node Pool"}],"name":"8ffa30c9_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"5d110e2f_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"ba6162d5_runbook","main_task_local_reference":{"kind":"app_task","name":"8ffa30c9_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n \n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetSSHKey"}],"name":"5fbc796b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetSSHKey","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"e3bea0da_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"0c5b765e_runbook","main_task_local_reference":{"kind":"app_task","name":"5fbc796b_dag"},"variable_list":[]},"name":"GetSSHKey"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update NodeOS"}],"name":"e7eeed5e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update NodeOS","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b1048112_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"39b6544a_runbook","main_task_local_reference":{"kind":"app_task","name":"e7eeed5e_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Target_OS","value":"","label":"OS available for upgrade : ","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['node_os_images'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['node_os_images']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Update NodeOS"},{"description":"Updates Kubernetes of your Karbon cluster","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update k8s"}],"name":"144be350_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update k8s","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"6f43dd04_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"1d055037_runbook","main_task_local_reference":{"kind":"app_task","name":"144be350_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Only the k8s version compliant with your node OS are displayed","data_type":"BASE","type":"EXEC_LOCAL","name":"Kube_Target","value":"","label":"Kubernetes target version","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\",\n  \"length\": 250\n}\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['ntnx_k8s_releases'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['ntnx_k8s_releases']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DRAINTIMEOUT","value":"180","label":"Drain timeout (in s)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Update Kubernetes version"}],"name":"Active Passive Master","restore_config_list":[],"snapshot_config_list":[],"patch_list":[],"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_IP","value":"192.168.100.31","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CalmVM_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"This field was applicable when Calico was chosen as the K8S Network ","data_type":"BASE","type":"LOCAL","name":"calico_cidr","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"pod_cidr_range","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"service_cidr_range","value":"172.19.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_cpu","value":"4","label":"Please key in the Worker Node CPU","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_memory","value":"8","label":"Worker Node Memory (Gb)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_disk_size","value":"120","label":"Worker Node Disk Size (Gb)","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"External_LB","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Applicable for Master Active Passive configuration only","data_type":"BASE","type":"LOCAL","name":"Master_VIP","value":"","label":"Master VIP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"No_Worker_Node","value":"3","label":"Please key in the no of worker node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"file_system","value":"ext4","label":"Select the File System for the Storage Class","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ext4","xfs"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"image_name","value":"","label":"Please select the Image Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\",\n  \"length\": 250\n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/images\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nimage_list = []\nimage_list_json = r.json()\nfor image in image_list_json['entities']:\n  if 'ntnx-' in image['spec']['name'] and 'msp' not in image['spec']['name']: #sometimes this value will be '{}'\n    image_name = image['spec']['name']\n    image_name = image_name.replace('karbon-','')\n    image_list.append(\"{}\".format(image_name))\n\nprint ','.join(image_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"network_name","value":"","label":"Please select the Network in the Cluster","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"subnet\"\n  \n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/subnets\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  subnet_list.append(\"{}\".format(subnet['spec']['name']))\n  \nprint ','.join(subnet_list)\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Storage_Container","value":"","label":"Please select the Storage Container in the Cluster","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PE_Admin.username}@@\"\npassword = \"@@{PE_Admin.secret}@@\"\nip = \"@@{PE_IP}@@\"\n\npayload = {\n  \n}\n \n#print \"PE IP: {}\".format(ip)\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\nurl = base_url \nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsc_list = []\nsc_list_json = r.json()\nfor sc in sc_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  sc_list.append(\"{}\".format(sc['name']))\n  \nprint ','.join(sc_list)    \n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"Kubernetes_Node_Network","value":"Flannel","label":"Please select the Kubernetes Node Network","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Flannel","Calico"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Master_Config","value":"Active-Passive","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"K8S_Version","value":"","label":"Please select the Kubernetes version","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\n\npayload = {\n}\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/acs\/k8sversion\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nk8s_list_tmp = []\nk8s_list_json = r.json()\n\n\nfor tmp in range(len( k8s_list_json )):\n  k8s_list_tmp.append(k8s_list_json[tmp]['k8sversion'])\n\n#Sort and keep unique stuff\nk8s_list = sorted(set(k8s_list_tmp))  \n  \nprint ','.join(k8s_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool","value":"worker-node-pool","label":"Please key in the worker node pool","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"","label":"Please key in the Kubernetes Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Username","value":"admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Password","value":"Tabeldata\/4u!!","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Username","value":"admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Password","value":"Tabeldata\/4u","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]},{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"b45aa011_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package3"}],"substrate_local_reference":{"kind":"app_substrate","name":"Karbon_AHV_2_3"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"a2af5579_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package7"}],"substrate_local_reference":{"kind":"app_substrate","name":"VM6"},"variable_list":[],"description":""}],"environment_reference_list":[],"application_url":"","description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Download Kube Config"}],"name":"5ae53297_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Download Kube Config","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b8611983_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"8a494a22_runbook","main_task_local_reference":{"kind":"app_task","name":"5ae53297_dag"},"variable_list":[]},"name":"Download Kuhe Config"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Add Worker Node in NodePool"}],"name":"a60c295b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Add Worker Node in NodePool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"1f1ffd77_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"5e9f7508_runbook","main_task_local_reference":{"kind":"app_task","name":"a60c295b_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"add_worker_node_count","value":"1","label":"Please key in the no of worker nodes to add","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{add_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Add Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Worker Node in Node Pool"}],"name":"539643a7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Worker Node in Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"c4689df3_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"33c2a08d_runbook","main_task_local_reference":{"kind":"app_task","name":"539643a7_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"remove_worker_node_count","value":"1","label":"Please key in the no of worker nodes to remove","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n  \"count\": @@{remove_worker_node_count}@@\n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Worker Node"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Node Pool"}],"name":"4309202d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"f5aeeff9_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"e047ca90_runbook","main_task_local_reference":{"kind":"app_task","name":"4309202d_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"gpu_model","value":"Nvidia A100","label":"Please key in the GPU Model","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_disk_mib","value":"122880","label":"Please key in the node memory in Mib","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_memory_mib","value":"8192","label":"Please key in the hard disk per node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_cpu","value":"8","label":"Please key in the number of vCPU for the node pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"num_nodes","value":"1","label":"Please key in the number of nodes in the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool_name","value":"","label":"Please key in the new Node Pool Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Create New Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete Node Pool"}],"name":"58e36f5d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Delete Node Pool","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"5d110e2f_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"4770ba86_runbook","main_task_local_reference":{"kind":"app_task","name":"58e36f5d_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"node_pool_name","value":"","label":"Please select the Node Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"\n\n  ## Create the Karbon Kubernetes cluster\n  # Set the headers, payload, and cookies\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\n \n}\n  \npc_user = 'admin'\npc_pass = 'nx2Tech123!'\n\n\n  # Set the address and make images call\nurl = \"https:\/\/localhost:9440\/karbon\/v1-alpha.1\/k8s\/clusters\/@@{cluster_name}@@\/node-pools\"\nresp = urlreq(url, verb='GET',params=json.dumps(payload), headers=headers, auth='BASIC', user=pc_user, passwd=pc_pass, verify=False)\n\npool_list = []\n  # If the call went through successfully, find the image by name\nif resp.ok:\n  pool_list_json = resp.json()\n # print pool_list_json\n  for pool in pool_list_json:\n    # print \"cluster['spec']['name']\"\n    pool_list.append(\"{}\".format(pool['name']))\n  \nprint ','.join(pool_list)    \n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Delete Node Pool"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetSSHKey"}],"name":"edd4439f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"GetSSHKey","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"e3bea0da_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"f965ac51_runbook","main_task_local_reference":{"kind":"app_task","name":"edd4439f_dag"},"variable_list":[]},"name":"GetSSHKey"},{"description":"Updates OS nodes of your Karbon cluster","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update NodeOS"}],"name":"ee293f5d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update NodeOS","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"b1048112_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"eceaa173_runbook","main_task_local_reference":{"kind":"app_task","name":"ee293f5d_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Target_OS","value":"","label":"Target OS available : ","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['node_os_images'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['node_os_images']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Update NodeOS"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update k8s"}],"name":"fa8aed81_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Karbon"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update k8s","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"6f43dd04_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"2502ad8b_runbook","main_task_local_reference":{"kind":"app_task","name":"fa8aed81_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Cluster_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DRAINTIEMOUT","value":"180","label":"Drain timeout (in s)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Only the k8s version compliant with your node OS are displayed","data_type":"BASE","type":"EXEC_LOCAL","name":"Kube_Target","value":"","label":"Kubernetes version available","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Username}@@\"\npassword = \"@@{PC_Password}@@\"\nip = \"@@{PC_IP}@@\"\nk8s_cluster = \"@@{cluster_name}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\",\n  \"length\": 250\n}\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/v1-beta.1\/k8s\/clusters\/\"+k8s_cluster+\"\/available-updates\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\ncluster_json = r.json()\n\nif not cluster_json['ntnx_k8s_releases'] :\n  print( \"None available\")\nelse:\n  update_list = []\n  for tmp in cluster_json['ntnx_k8s_releases']:\n    update_list.append(tmp['version'])\n  separator=','\n  print(separator.join(update_list))\n\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}]},"name":"Update Kubernets version"}],"name":"Active Active Master","restore_config_list":[],"snapshot_config_list":[],"patch_list":[],"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_IP","value":"192.168.100.31","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CalmVM_IP","value":"192.168.100.35","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"This field was applicable when Calico was chosen as the K8S Network ","data_type":"BASE","type":"LOCAL","name":"calico_cidr","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"pod_cidr_range","value":"172.20.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"service_cidr_range","value":"172.19.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_cpu","value":"4","label":"Please key in the Worker Node CPU","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_memory","value":"8","label":"Worker Node Memory (Gb)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"worker_node_disk_size","value":"120","label":"Worker Node Disk Size (Gb)","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"External_LB","value":"","label":"Please key in the external Load Balancer","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"This field is applicable for load balancer Master Nodes","data_type":"BASE","type":"LOCAL","name":"Master_VIP2","value":"","label":"Master VIP2","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Applicable for Master Active Passive configuration only","data_type":"BASE","type":"LOCAL","name":"Master_VIP","value":"","label":"Master VIP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"No_Worker_Node","value":"3","label":"Please key in the no of worker node","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"file_system","value":"ext4","label":"Select the File System for the Storage Class","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ext4","xfs"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"image_name","value":"","label":"Please select the Image Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"image\",\n  \"sort_order\": \"DESCENDING\",\n  \"sort_attribute\": \"name\"\n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/images\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nimage_list = []\nimage_list_json = r.json()\nfor image in image_list_json['entities']:\n  if 'ntnx-' in image['spec']['name'] and 'msp' not in image['spec']['name']: #sometimes this value will be '{}'\n    image_name = image['spec']['name']\n    image_name = image_name.replace('karbon-','')\n    image_list.append(\"{}\".format(image_name))\n\nprint ','.join(image_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"network_name","value":"","label":"Please select the Network in the Cluster","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"kind\": \"subnet\"\n  \n}\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/subnets\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  subnet_list.append(\"{}\".format(subnet['spec']['name']))\n  \nprint ','.join(subnet_list)\n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"Storage_Container","value":"","label":"Please select the Storage Container in the Cluster","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = @@{PC_Admin.username}@@\npassword = @@{PC_Admin.secret}@@\nip = \"@@{PE_IP}@@\"\n\npayload = {\n  \n}\n \n#print \"PE IP: {}\".format(ip)\nbase_url = \"https:\/\/\" + ip + \":9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\nurl = base_url \nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print \"Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nsc_list = []\nsc_list_json = r.json()\nfor sc in sc_list_json['entities']:\n # print \"cluster['spec']['name']\"\n  sc_list.append(\"{}\".format(sc['name']))\n  \nprint ','.join(sc_list)    \n","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"Kubernetes_Node_Network","value":"Flannel","label":"Please select the Kubernetes Node Network","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Flannel","Calico"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Master_Config","value":"Active-Active Load Balancer","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"K8S_Version","value":"","label":"Please select the Kubernetes version","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"user = \"@@{PC_Admin.username}@@\"\npassword = \"@@{PC_Admin.secret}@@\"\nip = \"@@{PC_IP}@@\"\n\n\npayload = {\n}\n\nurl = \"https:\/\/\" + ip + \":9440\/karbon\/acs\/k8sversion\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\n\nr = urlreq(url, url_method, auth=\"BASIC\", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n\nk8s_list_tmp = []\nk8s_list_json = r.json()\n\n\nfor tmp in range(len( k8s_list_json )):\n  k8s_list_tmp.append(k8s_list_json[tmp]['k8sversion'])\n\n#Sort and keep unique stuff\nk8s_list = sorted(set(k8s_list_tmp))  \n  \nprint ','.join(k8s_list)","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"node_pool","value":"worker-node-pool","label":"Please key in the worker node pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"","label":"Please key in the Kubernetes Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Username","value":"admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PE_Password","value":"Tabeldata\/4u!!","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Username","value":"admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_Password","value":"Tabeldata\/4u!!","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"CENTOS"},"type":"USER"},"name":"NKE deployment"},"api_version":"3.0","metadata":{"last_update_time":"1698823202960940","kind":"blueprint","spec_version":66,"creation_time":"1698218330697723","name":"NKE deployment"}}